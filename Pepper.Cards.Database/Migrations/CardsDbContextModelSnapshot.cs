// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Pepper.Cards.Database;

#nullable disable

namespace Pepper.Cards.Database.Migrations
{
    [DbContext(typeof(CardsDbContext))]
    partial class CardsDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Pepper.Cards.Data.DbModels.Card", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("DeckStyleId")
                        .HasColumnType("int");

                    b.Property<int>("Suit")
                        .HasColumnType("int");

                    b.Property<byte[]>("TagUid")
                        .IsRequired()
                        .HasColumnType("varbinary(900)");

                    b.Property<int>("Value")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DeckStyleId");

                    b.HasIndex("TagUid")
                        .IsUnique();

                    b.ToTable("Cards");
                });

            modelBuilder.Entity("Pepper.Cards.Data.DbModels.DeckStyle", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("BackDesignKey")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("DarkMode")
                        .HasColumnType("bit");

                    b.Property<bool>("HasFourCornerLegend")
                        .HasColumnType("bit");

                    b.Property<bool>("IsFourColour")
                        .HasColumnType("bit");

                    b.Property<bool>("LargePrint")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("DeckStyles");
                });

            modelBuilder.Entity("Pepper.Cards.Data.DbModels.Game", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("EndedUtc")
                        .HasColumnType("datetime2");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("StartedUtc")
                        .HasColumnType("datetime2");

                    b.Property<int>("TypeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TypeId");

                    b.ToTable("Games");
                });

            modelBuilder.Entity("Pepper.Cards.Data.DbModels.GameHand", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("EndedUtc")
                        .HasColumnType("datetime2");

                    b.Property<int>("GameId")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartedUtc")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("GameId");

                    b.ToTable("Hands");
                });

            modelBuilder.Entity("Pepper.Cards.Data.DbModels.GameType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("GameTypes");
                });

            modelBuilder.Entity("Pepper.Cards.Data.DbModels.HandStep", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CardId")
                        .HasColumnType("int");

                    b.Property<int?>("FromPositionId")
                        .HasColumnType("int");

                    b.Property<int>("HandId")
                        .HasColumnType("int");

                    b.Property<double>("Time")
                        .HasColumnType("float");

                    b.Property<int>("ToPositionId")
                        .HasColumnType("int");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CardId");

                    b.HasIndex("FromPositionId");

                    b.HasIndex("HandId");

                    b.HasIndex("ToPositionId");

                    b.ToTable("HandSteps");
                });

            modelBuilder.Entity("Pepper.Cards.Data.DbModels.TablePosition", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("NormallySecret")
                        .HasColumnType("bit");

                    b.Property<int?>("SeatNumber")
                        .HasColumnType("int");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("TablePositions");
                });

            modelBuilder.Entity("Pepper.Cards.Data.DbModels.TablePositionReader", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AntennaId")
                        .HasColumnType("int");

                    b.Property<int>("ReaderId")
                        .HasColumnType("int");

                    b.Property<int>("TablePositionId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TablePositionId");

                    b.ToTable("TablePositionReaders");
                });

            modelBuilder.Entity("Pepper.Cards.Data.DbModels.Card", b =>
                {
                    b.HasOne("Pepper.Cards.Data.DbModels.DeckStyle", "DeckStyle")
                        .WithMany()
                        .HasForeignKey("DeckStyleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DeckStyle");
                });

            modelBuilder.Entity("Pepper.Cards.Data.DbModels.Game", b =>
                {
                    b.HasOne("Pepper.Cards.Data.DbModels.GameType", "Type")
                        .WithMany()
                        .HasForeignKey("TypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Type");
                });

            modelBuilder.Entity("Pepper.Cards.Data.DbModels.GameHand", b =>
                {
                    b.HasOne("Pepper.Cards.Data.DbModels.Game", "Game")
                        .WithMany("Hands")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Game");
                });

            modelBuilder.Entity("Pepper.Cards.Data.DbModels.HandStep", b =>
                {
                    b.HasOne("Pepper.Cards.Data.DbModels.Card", "Card")
                        .WithMany()
                        .HasForeignKey("CardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Pepper.Cards.Data.DbModels.TablePosition", "FromPosition")
                        .WithMany()
                        .HasForeignKey("FromPositionId");

                    b.HasOne("Pepper.Cards.Data.DbModels.GameHand", "Hand")
                        .WithMany("Steps")
                        .HasForeignKey("HandId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Pepper.Cards.Data.DbModels.TablePosition", "ToPosition")
                        .WithMany()
                        .HasForeignKey("ToPositionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Card");

                    b.Navigation("FromPosition");

                    b.Navigation("Hand");

                    b.Navigation("ToPosition");
                });

            modelBuilder.Entity("Pepper.Cards.Data.DbModels.TablePositionReader", b =>
                {
                    b.HasOne("Pepper.Cards.Data.DbModels.TablePosition", "TablePosition")
                        .WithMany("Readers")
                        .HasForeignKey("TablePositionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TablePosition");
                });

            modelBuilder.Entity("Pepper.Cards.Data.DbModels.Game", b =>
                {
                    b.Navigation("Hands");
                });

            modelBuilder.Entity("Pepper.Cards.Data.DbModels.GameHand", b =>
                {
                    b.Navigation("Steps");
                });

            modelBuilder.Entity("Pepper.Cards.Data.DbModels.TablePosition", b =>
                {
                    b.Navigation("Readers");
                });
#pragma warning restore 612, 618
        }
    }
}
