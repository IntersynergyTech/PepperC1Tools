//------------------------------------------------------------------------------

//  <auto-generated>
//      This code was generated by:
//        TerminalGuiDesigner v2.0.0.0
//      You can make changes to this file and they will not be overwritten when saving.
//  </auto-generated>
// -----------------------------------------------------------------------------

using System.Collections.ObjectModel;
using Microsoft.EntityFrameworkCore;
using Pepper.Cards.Data.Enums;
using Pepper.Cards.Data.Models;
using Pepper.Core.Data;

namespace Pepper.Cli.Windows.Reader;

public partial class Reader
{
    private readonly ObservableCollection<string> _readHistory = new ObservableCollection<string>();
    
    public Reader()
    {
        InitializeComponent();

        Program.TagDetected += TagDetected;

        Closing += (sender, args) => { Program.TagDetected -= TagDetected; };
        
        readHistoryList.SetSource(_readHistory);
        
        ResetView();
    }

    private void TagDetected(object? sender, DetectedTag e)
    {
        uidLabel.Text = BitConverter.ToString(e.TagId);
        tagTypeLabel.Text = e.TagType.ToString();
        tagSpecLabel.Text = e.CardType.ToString();
        tagReaderLabel.Text = $"{e.ReaderId}x{e.AntennaId}";
        
        var lookup = Program.CardsDbContext.Cards.Include(c => c.DeckStyle).SingleOrDefault(c => c.TagUid == e.TagId);
     
        if (lookup != null)
        {
            LoadTag(lookup, e);
        }
        else
        {
            ResetView();
        }
    }
    
    private void ResetView()
    {
        cardValueLabel.Text = string.Empty;
        suitLabel.Text = string.Empty;
        deckLabel.Text = string.Empty;

        cardTopLeftLabel.Text = string.Empty;
        cardTopRightLabel.Text = string.Empty;
        cardBottomLeftLabel.Text = string.Empty;
        cardBottomRightLabel.Text = string.Empty;
    }

    private void LoadTag(Card card, DetectedTag tag)
    {
        SetCardView(card.Value, card.Suit, card.DeckStyle.IsFourColour);

        cardValueLabel.Text = card.Value.ToString();
        suitLabel.Text = card.Suit.ToString();
        deckLabel.Text = card.DeckStyle.Name;

        var logId = BitConverter.ToString(card.TagUid).Replace("-", string.Empty);
        _readHistory.Insert(0, $"[{DateTime.Now:HH:mm:ss}-{tag.ReaderId}x{tag.AntennaId}] {logId.PadLeft(20)}  {card.Value.ToShortDisplayString()}{card.Suit.ToShortDisplayString()} ({card.DeckStyle.ToString()}) - {card.Value} {card.Suit})");
    }
    
    private void SetCardView(
        CardValue value,
        Suit suit,
        bool fourColor
    )
    {
        var cardTopCornersText = $"{value.ToCardDisplayString()}\n{suit.ToSymbol()}";
        var cardBottomCornersText = $"{suit.ToSymbol()}\n{value.ToCardDisplayString()}";

        cardTopLeftLabel.Text = cardTopCornersText;
        cardTopRightLabel.Text = cardTopCornersText;

        cardBottomLeftLabel.Text = cardBottomCornersText;
        cardBottomRightLabel.Text = cardBottomCornersText;
    }
}
